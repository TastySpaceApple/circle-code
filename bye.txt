<!DOCTYPE html>
<html>
<head>
  <title>OpenCV.js Circle Recognition</title>
  <script src="https://docs.opencv.org/4.x/opencv.js" type="text/javascript"></script>
  <style>
    canvas {
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <h2>Circle Recognition with OpenCV.js</h2>
  <input type="file" id="fileInput" accept="image/*">
  <br><br>
  <canvas id="canvasOutput"></canvas>

  <script type="text/javascript">
    function fillCircle(ctx, x, y, radius){
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
      ctx.fill();
    }
    function distPoints(p1, p2){
      return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
    }
    async function test(e) {
      let cv = await window.cv;
      let imgElement = new Image();
      imgElement.src = './images/10.png';
      imgElement.onload = function() {
        let canvas = document.getElementById('canvasOutput');
        let ctx = canvas.getContext('2d');
        canvas.width = imgElement.width;
        canvas.height = imgElement.height;
        ctx.drawImage(imgElement, 0, 0, imgElement.width - 10, imgElement.height);

        let src = cv.imread(canvas);
        let threshold = new cv.Mat();
        cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
        cv.threshold(src, threshold, 177, 255, cv.THRESH_BINARY_INV);

        //close
        let kernel = cv.Mat.ones(9, 9, cv.CV_8U);
        let anchor = new cv.Point(-1, -1);
        cv.morphologyEx(threshold, threshold, cv.MORPH_CLOSE, kernel, anchor, 2, cv.BORDER_CONSTANT, cv.morphologyDefaultBorderValue());
        
        // color connected components
        let contours = new cv.MatVector();
        let hierarchy = new cv.Mat();
        cv.findContours(threshold, contours, hierarchy, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE);
        const circles = [];
        const innerCircles = [];
        for (let i = 0; i < contours.size(); ++i) {
          let color = new cv.Scalar(0, 0, 255);
          ctx.strokeStyle = 'rgba(0,255,0,0.5)';
          let cnt = contours.get(i);
          let circle = cv.minEnclosingCircle(cnt);
          let rect = cv.boundingRect(cnt);
          let circleCenter = circle.center;
          let rectCenter = new cv.Point(rect.x + rect.width / 2, rect.y + rect.height / 2);
          // check if the centers are similar
          let centersFit = distPoints(circleCenter, rectCenter) < 10;
          let widthsFit = Math.abs(circle.radius - rect.width / 2) < 10;
          let heightsFit = Math.abs(circle.radius - rect.height / 2) < 10;
          if(centersFit && widthsFit && heightsFit){
            circles.push({
              x: circleCenter.x,
              y: circleCenter.y,
              radius: circle.radius
            });
          }
        }

        // find circles that are inside other circles
        for(let i = 0; i < circles.length; i++){
          let circle = circles[i];
          for(let j = 0; j < circles.length; j++){
            if(i == j){
              continue;
            }
            let otherCircle = circles[j];
            let distance = distPoints(circle, otherCircle);
            if(distance < circle.radius - otherCircle.radius){
              innerCircles.push(otherCircle);
            }
          }
        }

        // fill inner circles
        for(let i = 0; i < innerCircles.length; i++){
          let circle = innerCircles[i];
          ctx.fillStyle = 'rgba(0,255,0,0.5)';
          fillCircle(ctx, circle.x, circle.y, circle.radius);
        }


        // draw thresholded image
        // cv.imshow('canvasOutput', src);
      }
    }
    test();
  </script>
</body>
</html>






// Draw defects
            let hull = new cv.Mat();
            cv.convexHull(contour, hull, false, true);
            console.log(hull);
            // draw convex hull
            ctx.fillStyle = 'red'
            for (let j = 0; j < hull.rows; j++) {
              let point = new cv.Point(hull.data32S[j * 2], hull.data32S[j * 2 + 1]);
              ctx.beginPath();
              ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI, false);
              ctx.fill();
            }
            // continue;
            // draw concave hull
            let defects = new cv.Mat();
            cv.convexityDefects(contour, hull, defects);
            for (let j = 0; j < defects.rows; j++) {
              let start = new cv.Point(contour.data32S[defects.data32S[j * 4] * 2], contour.data32S[defects.data32S[j * 4] * 2 + 1]);
              let end = new cv.Point(contour.data32S[defects.data32S[j * 4 + 1] * 2], contour.data32S[defects.data32S[j * 4 + 1] * 2 + 1]);
              let far = new cv.Point(contour.data32S[defects.data32S[j * 4 + 2] * 2], contour.data32S[defects.data32S[j * 4 + 2] * 2 + 1]);
              let depth = defects.data32S[j * 4 + 3] / 256;
              if (depth > 10) {
                ctx.fillStyle = 'blue';
                fillCircle(ctx, start.x, start.y, 2);
                fillCircle(ctx, end.x, end.y, 2);
                fillCircle(ctx, far.x, far.y, 2);
                ctx.beginPath();
                ctx.moveTo(start.x, start.y);
                ctx.lineTo(end.x, end.y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(start.x, start.y);
                ctx.lineTo(far.x, far.y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(end.x, end.y);
                ctx.lineTo(far.x, far.y);
                ctx.stroke();
              }
            }